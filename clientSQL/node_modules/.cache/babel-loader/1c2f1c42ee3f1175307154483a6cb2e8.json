{"ast":null,"code":"// import Response from \"../defultComponent/response.tsx\";\n// import axios from \"axios\";\n// var http = \"http://127.0.0.1:4001\"\n// export default class BaseService {\n//     private static baseURL: string = `${process.env.REACT_APP_BASE_URL}:${process.env.REACT_APP_SERVER_PORT}`;\n//     public static async getAll<T>(url: string): Promise<Response> {\n//         let res = await axios.get<Array<T>>(http + url)\n//             .then((response: any) => {\n//                 const result = response.data;\n//                 console.log(result);\n//                 console.log(response);\n//                 if (result && response.status === 200) {\n//                     return new Response(true, result as Array<T>, \"Success\", \"\");\n//                 } else {\n//                     const msg = (result.messageList && result.messageList.length > 0) ? result.messageList[0].text : \"Error\";\n//                     return new Response(false, null, \"Error\", msg);\n//                 }\n//             })\n//             .catch(function (error) {\n//                 return new Response(false, null, \"Error\", error);\n//             });\n//         console.log(res);\n//         return res;\n//     }\n//     public static fetch<T>(url: string): Promise<Response> {\n//         // console.log(\"aaaa\", http, \"dddd\", url)\n//         let res = axios.get<T>(http + url)\n//             .then((response: any) => {\n//                 // console.log('response: ', response)\n//                 return response;\n//             })\n//             .catch(function (error) {\n//                 return new Response(false, null, \"Error\", error);\n//             });\n//         return res;\n//     }\n//     public static get<T>(url: string, param: any): Promise<Response> {\n//         let res = axios.get<T>(http + url + param)\n//             .then((response: any) => {\n//                 // console.log('response: ', response)\n//                 const result = response.data;\n//                 //console.log('data: ', result);\n//                 if (result) {//&& response.status === 200){\n//                     return new Response(true, result, \"Success\", \"\");\n//                 } else {\n//                     const msg = (result.messageList && result.messageList.length > 0) ? result.messageList[0].text : \"Error\";\n//                     return new Response(false, null, \"Error\", msg);\n//                 }\n//             })\n//             .catch(function (error) {\n//                 return new Response(false, null, \"Error\", error);\n//             });\n//         return res;\n//     }\n//     public static delete(url: string, param: any): Promise<Response> {\n//         console.log(param);\n//         let res = axios.delete(http + url + param.id)\n//             .then(response => {\n//                 const result = response.data\n//                 //const result = response;\n//                 console.log(result)\n//                 if (response) {//&& result.success){\n//                     return new Response(true, result, \"Success\", \"\");\n//                 } else {\n//                     const msg = (result.messageList && result.messageList.length > 0) ? result.messageList[0].text : \"Error\";\n//                     return new Response(false, null, \"Error\", msg);\n//                 }\n//             })\n//             .catch(function (error) {\n//                 return new Response(false, null, \"Error\", error);\n//             });\n//         return res;\n//     }\n//     public static create<T>(url: string, obj: T): Promise<Response> {\n//         console.log(obj)\n//         let res = axios.post(http + url, obj)\n//             .then(response => {\n//                 console.log(url)\n//                 console.log(obj)\n//                 const result = response.data;\n//                 if (result) {//&& result.success){\n//                     return new Response(true, result, \"Success\", \"\");\n//                 } else {\n//                     const msg = (result.messageList && result.messageList.length > 0) ? result.messageList[0].text : \"Error\";\n//                     return new Response(false, null, \"Error\", msg);\n//                 }\n//             })\n//             .catch(function (error) {\n//                 return new Response(false, null, \"Error\", error);\n//             });\n//         return res;\n//     }\n//     public static update<T>(url: string, param: any, obj: T): Promise<Response> {\n//         let res = axios.put(http + url + param, obj)\n//             .then(response => {\n//                 const result = response.data;\n//                 console.log(response)\n//                 if (result) {//&& result.success){\n//                     return new Response(true, result, \"Success\", \"\");\n//                 } else {\n//                     const msg = (result.messageList && result.messageList.length > 0) ? result.messageList[0].text : \"Error\";\n//                     return new Response(false, null, \"Error\", msg);\n//                 }\n//             })\n//             .catch(function (error) {\n//                 return new Response(false, null, \"Error\", error);;\n//             });\n//         return res;\n//     }\n//     public static put(url: string): Promise<Response> {\n//         let res = axios.put(http + url)\n//             .then(response => {\n//                 console.log(\"url\", url)\n//                 const result = response.data;\n//                 console.log(\"result\", result)\n//                 if (result) {//&& result.success){\n//                     return new Response(true, result, \"Success\", \"\");\n//                 } else {\n//                     const msg = (result.messageList && result.messageList.length > 0) ? result.messageList[0].text : \"Error\";\n//                     return new Response(false, null, \"Error\", msg);\n//                 }\n//             })\n//             .catch(function (error) {\n//                 return new Response(false, null, \"Error\", error);\n//             });\n//         return res;\n//     }\n// }","map":{"version":3,"names":[],"sources":["/home/evyatar/resteronProjectSQL/clientSQL/src/service/base.service.tsx"],"sourcesContent":["// import Response from \"../defultComponent/response.tsx\";\n// import axios from \"axios\";\n\n// var http = \"http://127.0.0.1:4001\"\n\n// export default class BaseService {\n//     private static baseURL: string = `${process.env.REACT_APP_BASE_URL}:${process.env.REACT_APP_SERVER_PORT}`;\n\n\n//     public static async getAll<T>(url: string): Promise<Response> {\n//         let res = await axios.get<Array<T>>(http + url)\n//             .then((response: any) => {\n//                 const result = response.data;\n//                 console.log(result);\n//                 console.log(response);\n//                 if (result && response.status === 200) {\n//                     return new Response(true, result as Array<T>, \"Success\", \"\");\n//                 } else {\n//                     const msg = (result.messageList && result.messageList.length > 0) ? result.messageList[0].text : \"Error\";\n//                     return new Response(false, null, \"Error\", msg);\n//                 }\n\n//             })\n//             .catch(function (error) {\n//                 return new Response(false, null, \"Error\", error);\n//             });\n//         console.log(res);\n//         return res;\n//     }\n\n//     public static fetch<T>(url: string): Promise<Response> {\n//         // console.log(\"aaaa\", http, \"dddd\", url)\n//         let res = axios.get<T>(http + url)\n//             .then((response: any) => {\n//                 // console.log('response: ', response)\n//                 return response;\n//             })\n//             .catch(function (error) {\n//                 return new Response(false, null, \"Error\", error);\n//             });\n//         return res;\n//     }\n\n\n\n//     public static get<T>(url: string, param: any): Promise<Response> {\n//         let res = axios.get<T>(http + url + param)\n//             .then((response: any) => {\n//                 // console.log('response: ', response)\n//                 const result = response.data;\n//                 //console.log('data: ', result);\n//                 if (result) {//&& response.status === 200){\n//                     return new Response(true, result, \"Success\", \"\");\n//                 } else {\n//                     const msg = (result.messageList && result.messageList.length > 0) ? result.messageList[0].text : \"Error\";\n//                     return new Response(false, null, \"Error\", msg);\n//                 }\n//             })\n//             .catch(function (error) {\n//                 return new Response(false, null, \"Error\", error);\n//             });\n//         return res;\n//     }\n\n//     public static delete(url: string, param: any): Promise<Response> {\n//         console.log(param);\n\n//         let res = axios.delete(http + url + param.id)\n//             .then(response => {\n//                 const result = response.data\n//                 //const result = response;\n//                 console.log(result)\n//                 if (response) {//&& result.success){\n//                     return new Response(true, result, \"Success\", \"\");\n//                 } else {\n//                     const msg = (result.messageList && result.messageList.length > 0) ? result.messageList[0].text : \"Error\";\n//                     return new Response(false, null, \"Error\", msg);\n//                 }\n//             })\n//             .catch(function (error) {\n//                 return new Response(false, null, \"Error\", error);\n//             });\n//         return res;\n//     }\n//     public static create<T>(url: string, obj: T): Promise<Response> {\n//         console.log(obj)\n//         let res = axios.post(http + url, obj)\n//             .then(response => {\n//                 console.log(url)\n//                 console.log(obj)\n//                 const result = response.data;\n//                 if (result) {//&& result.success){\n//                     return new Response(true, result, \"Success\", \"\");\n//                 } else {\n//                     const msg = (result.messageList && result.messageList.length > 0) ? result.messageList[0].text : \"Error\";\n//                     return new Response(false, null, \"Error\", msg);\n//                 }\n//             })\n//             .catch(function (error) {\n//                 return new Response(false, null, \"Error\", error);\n//             });\n//         return res;\n//     }\n//     public static update<T>(url: string, param: any, obj: T): Promise<Response> {\n//         let res = axios.put(http + url + param, obj)\n//             .then(response => {\n//                 const result = response.data;\n//                 console.log(response)\n//                 if (result) {//&& result.success){\n//                     return new Response(true, result, \"Success\", \"\");\n//                 } else {\n//                     const msg = (result.messageList && result.messageList.length > 0) ? result.messageList[0].text : \"Error\";\n//                     return new Response(false, null, \"Error\", msg);\n//                 }\n//             })\n//             .catch(function (error) {\n//                 return new Response(false, null, \"Error\", error);;\n//             });\n//         return res;\n//     }\n//     public static put(url: string): Promise<Response> {\n//         let res = axios.put(http + url)\n//             .then(response => {\n//                 console.log(\"url\", url)\n//                 const result = response.data;\n//                 console.log(\"result\", result)\n//                 if (result) {//&& result.success){\n//                     return new Response(true, result, \"Success\", \"\");\n//                 } else {\n//                     const msg = (result.messageList && result.messageList.length > 0) ? result.messageList[0].text : \"Error\";\n//                     return new Response(false, null, \"Error\", msg);\n//                 }\n//             })\n//             .catch(function (error) {\n//                 return new Response(false, null, \"Error\", error);\n//             });\n//         return res;\n//     }\n// }\n"],"mappings},"metadata":{},"sourceType":"module"}