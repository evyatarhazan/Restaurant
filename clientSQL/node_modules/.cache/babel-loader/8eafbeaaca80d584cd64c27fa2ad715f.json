{"ast":null,"code":"import Response from \"../defultComponent/response.tsx\";\nimport axios from \"axios\";\nvar http = \"http://127.0.0.1:4001\";\nexport default class BaseService {\n  //     public static async getAll<T>(url: string): Promise<Response> {\n  //         let res = await axios.get<Array<T>>(http + url)\n  //             .then((response: any) => {\n  //                 const result = response.data;\n  //                 console.log(result);\n  //                 console.log(response);\n  //                 if (result && response.status === 200) {\n  //                     return new Response(true, result as Array<T>, \"Success\", \"\");\n  //                 } else {\n  //                     const msg = (result.messageList && result.messageList.length > 0) ? result.messageList[0].text : \"Error\";\n  //                     return new Response(false, null, \"Error\", msg);\n  //                 }\n  //             })\n  //             .catch(function (error) {\n  //                 return new Response(false, null, \"Error\", error);\n  //             });\n  //         console.log(res);\n  //         return res;\n  //     }\n  //     public static fetch<T>(url: string): Promise<Response> {\n  //         // console.log(\"aaaa\", http, \"dddd\", url)\n  //         let res = axios.get<T>(http + url)\n  //             .then((response: any) => {\n  //                 // console.log('response: ', response)\n  //                 return response;\n  //             })\n  //             .catch(function (error) {\n  //                 return new Response(false, null, \"Error\", error);\n  //             });\n  //         return res;\n  //     }\n  //     public static get<T>(url: string, param: any): Promise<Response> {\n  //         let res = axios.get<T>(http + url + param)\n  //             .then((response: any) => {\n  //                 // console.log('response: ', response)\n  //                 const result = response.data;\n  //                 //console.log('data: ', result);\n  //                 if (result) {//&& response.status === 200){\n  //                     return new Response(true, result, \"Success\", \"\");\n  //                 } else {\n  //                     const msg = (result.messageList && result.messageList.length > 0) ? result.messageList[0].text : \"Error\";\n  //                     return new Response(false, null, \"Error\", msg);\n  //                 }\n  //             })\n  //             .catch(function (error) {\n  //                 return new Response(false, null, \"Error\", error);\n  //             });\n  //         return res;\n  //     }\n  //     public static delete(url: string, param: any): Promise<Response> {\n  //         console.log(param);\n  //         let res = axios.delete(http + url + param.id)\n  //             .then(response => {\n  //                 const result = response.data\n  //                 //const result = response;\n  //                 console.log(result)\n  //                 if (response) {//&& result.success){\n  //                     return new Response(true, result, \"Success\", \"\");\n  //                 } else {\n  //                     const msg = (result.messageList && result.messageList.length > 0) ? result.messageList[0].text : \"Error\";\n  //                     return new Response(false, null, \"Error\", msg);\n  //                 }\n  //             })\n  //             .catch(function (error) {\n  //                 return new Response(false, null, \"Error\", error);\n  //             });\n  //         return res;\n  //     }\n  //     public static create<T>(url: string, obj: T): Promise<Response> {\n  //         console.log(obj)\n  //         let res = axios.post(http + url, obj)\n  //             .then(response => {\n  //                 console.log(url)\n  //                 console.log(obj)\n  //                 const result = response.data;\n  //                 if (result) {//&& result.success){\n  //                     return new Response(true, result, \"Success\", \"\");\n  //                 } else {\n  //                     const msg = (result.messageList && result.messageList.length > 0) ? result.messageList[0].text : \"Error\";\n  //                     return new Response(false, null, \"Error\", msg);\n  //                 }\n  //             })\n  //             .catch(function (error) {\n  //                 return new Response(false, null, \"Error\", error);\n  //             });\n  //         return res;\n  //     }\n  //     public static update<T>(url: string, param: any, obj: T): Promise<Response> {\n  //         let res = axios.put(http + url + param, obj)\n  //             .then(response => {\n  //                 const result = response.data;\n  //                 console.log(response)\n  //                 if (result) {//&& result.success){\n  //                     return new Response(true, result, \"Success\", \"\");\n  //                 } else {\n  //                     const msg = (result.messageList && result.messageList.length > 0) ? result.messageList[0].text : \"Error\";\n  //                     return new Response(false, null, \"Error\", msg);\n  //                 }\n  //             })\n  //             .catch(function (error) {\n  //                 return new Response(false, null, \"Error\", error);;\n  //             });\n  //         return res;\n  //     }\n  static put(url) {\n    let res = axios.put(http + url).then(response => {\n      console.log(\"url\", url);\n      const result = response.data;\n      console.log(\"result\", result);\n\n      if (result) {\n        //&& result.success){\n        return new Response(true, result, \"Success\", \"\");\n      } else {\n        const msg = result.messageList && result.messageList.length > 0 ? result.messageList[0].text : \"Error\";\n        return new Response(false, null, \"Error\", msg);\n      }\n    }).catch(function (error) {\n      return new Response(false, null, \"Error\", error);\n    });\n    return res;\n  }\n\n}\nBaseService.baseURL = `${process.env.REACT_APP_BASE_URL}:${process.env.REACT_APP_SERVER_PORT}`;","map":{"version":3,"names":["Response","axios","http","BaseService","put","url","res","then","response","console","log","result","data","msg","messageList","length","text","catch","error","baseURL","process","env","REACT_APP_BASE_URL","REACT_APP_SERVER_PORT"],"sources":["/home/evyatar/resteronProjectSQL/clientSQL/src/service/base.service.tsx"],"sourcesContent":["import Response from \"../defultComponent/response.tsx\";\nimport axios from \"axios\";\n\nvar http = \"http://127.0.0.1:4001\"\n\nexport default class BaseService {\n    private static baseURL: string = `${process.env.REACT_APP_BASE_URL}:${process.env.REACT_APP_SERVER_PORT}`;\n\n\n//     public static async getAll<T>(url: string): Promise<Response> {\n//         let res = await axios.get<Array<T>>(http + url)\n//             .then((response: any) => {\n//                 const result = response.data;\n//                 console.log(result);\n//                 console.log(response);\n//                 if (result && response.status === 200) {\n//                     return new Response(true, result as Array<T>, \"Success\", \"\");\n//                 } else {\n//                     const msg = (result.messageList && result.messageList.length > 0) ? result.messageList[0].text : \"Error\";\n//                     return new Response(false, null, \"Error\", msg);\n//                 }\n\n//             })\n//             .catch(function (error) {\n//                 return new Response(false, null, \"Error\", error);\n//             });\n//         console.log(res);\n//         return res;\n//     }\n\n//     public static fetch<T>(url: string): Promise<Response> {\n//         // console.log(\"aaaa\", http, \"dddd\", url)\n//         let res = axios.get<T>(http + url)\n//             .then((response: any) => {\n//                 // console.log('response: ', response)\n//                 return response;\n//             })\n//             .catch(function (error) {\n//                 return new Response(false, null, \"Error\", error);\n//             });\n//         return res;\n//     }\n\n\n\n//     public static get<T>(url: string, param: any): Promise<Response> {\n//         let res = axios.get<T>(http + url + param)\n//             .then((response: any) => {\n//                 // console.log('response: ', response)\n//                 const result = response.data;\n//                 //console.log('data: ', result);\n//                 if (result) {//&& response.status === 200){\n//                     return new Response(true, result, \"Success\", \"\");\n//                 } else {\n//                     const msg = (result.messageList && result.messageList.length > 0) ? result.messageList[0].text : \"Error\";\n//                     return new Response(false, null, \"Error\", msg);\n//                 }\n//             })\n//             .catch(function (error) {\n//                 return new Response(false, null, \"Error\", error);\n//             });\n//         return res;\n//     }\n\n//     public static delete(url: string, param: any): Promise<Response> {\n//         console.log(param);\n\n//         let res = axios.delete(http + url + param.id)\n//             .then(response => {\n//                 const result = response.data\n//                 //const result = response;\n//                 console.log(result)\n//                 if (response) {//&& result.success){\n//                     return new Response(true, result, \"Success\", \"\");\n//                 } else {\n//                     const msg = (result.messageList && result.messageList.length > 0) ? result.messageList[0].text : \"Error\";\n//                     return new Response(false, null, \"Error\", msg);\n//                 }\n//             })\n//             .catch(function (error) {\n//                 return new Response(false, null, \"Error\", error);\n//             });\n//         return res;\n//     }\n//     public static create<T>(url: string, obj: T): Promise<Response> {\n//         console.log(obj)\n//         let res = axios.post(http + url, obj)\n//             .then(response => {\n//                 console.log(url)\n//                 console.log(obj)\n//                 const result = response.data;\n//                 if (result) {//&& result.success){\n//                     return new Response(true, result, \"Success\", \"\");\n//                 } else {\n//                     const msg = (result.messageList && result.messageList.length > 0) ? result.messageList[0].text : \"Error\";\n//                     return new Response(false, null, \"Error\", msg);\n//                 }\n//             })\n//             .catch(function (error) {\n//                 return new Response(false, null, \"Error\", error);\n//             });\n//         return res;\n//     }\n//     public static update<T>(url: string, param: any, obj: T): Promise<Response> {\n//         let res = axios.put(http + url + param, obj)\n//             .then(response => {\n//                 const result = response.data;\n//                 console.log(response)\n//                 if (result) {//&& result.success){\n//                     return new Response(true, result, \"Success\", \"\");\n//                 } else {\n//                     const msg = (result.messageList && result.messageList.length > 0) ? result.messageList[0].text : \"Error\";\n//                     return new Response(false, null, \"Error\", msg);\n//                 }\n//             })\n//             .catch(function (error) {\n//                 return new Response(false, null, \"Error\", error);;\n//             });\n//         return res;\n//     }\n    public static put(url: string): Promise<Response> {\n        let res = axios.put(http + url)\n            .then(response => {\n                console.log(\"url\", url)\n                const result = response.data;\n                console.log(\"result\", result)\n                if (result) {//&& result.success){\n                    return new Response(true, result, \"Success\", \"\");\n                } else {\n                    const msg = (result.messageList && result.messageList.length > 0) ? result.messageList[0].text : \"Error\";\n                    return new Response(false, null, \"Error\", msg);\n                }\n            })\n            .catch(function (error) {\n                return new Response(false, null, \"Error\", error);\n            });\n        return res;\n    }\n}\n"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,iCAArB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,IAAIC,IAAI,GAAG,uBAAX;AAEA,eAAe,MAAMC,WAAN,CAAkB;EAIjqB,OAAHC,GAAG,CAACC,GAAD,EAAiC;IAC9C,IAAIC,GAAG,GAAGL,KAAK,CAACG,GAAN,CAAUF,IAAI,GAAGG,GAAjB,EACLE,IADK,CACAC,QAAQ,IAAI;MACdC,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBL,GAAnB;MACA,MAAMM,MAAM,GAAGH,QAAQ,CAACI,IAAxB;MACAH,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBC,MAAtB;;MACA,IAAIA,MAAJ,EAAY;QAAC;QACT,OAAO,IAAIX,QAAJ,CAAa,IAAb,EAAmBW,MAAnB,EAA2B,SAA3B,EAAsC,EAAtC,CAAP;MACH,CAFD,MAEO;QACH,MAAME,GAAG,GAAIF,MAAM,CAACG,WAAP,IAAsBH,MAAM,CAACG,WAAP,CAAmBC,MAAnB,GAA4B,CAAnD,GAAwDJ,MAAM,CAACG,WAAP,CAAmB,CAAnB,EAAsBE,IAA9E,GAAqF,OAAjG;QACA,OAAO,IAAIhB,QAAJ,CAAa,KAAb,EAAoB,IAApB,EAA0B,OAA1B,EAAmCa,GAAnC,CAAP;MACH;IACJ,CAXK,EAYLI,KAZK,CAYC,UAAUC,KAAV,EAAiB;MACpB,OAAO,IAAIlB,QAAJ,CAAa,KAAb,EAAoB,IAApB,EAA0B,OAA1B,EAAmCkB,KAAnC,CAAP;IACH,CAdK,CAAV;IAeA,OAAOZ,GAAP;EACH;;AApI4B;AAAZH,W,CACFgB,O,GAAmB,GAAEC,OAAO,CAACC,GAAR,CAAYC,kBAAmB,IAAGF,OAAO,CAACC,GAAR,CAAYE,qBAAsB,E"},"metadata":{},"sourceType":"module"}